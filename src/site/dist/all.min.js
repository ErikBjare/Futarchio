app=angular.module("FutarchioApp",["ngResource","ngRoute","ngCookies"]),app.config(["$routeProvider","$locationProvider",function(l){l.when("/",{templateUrl:"home.html",controller:"HomeController"}).when("/polls",{templateUrl:"polls.html",controller:"PollsController"}).when("/predictions",{templateUrl:"predictions.html",controller:"PredictionsController"}).when("/profile/:username",{templateUrl:"profile.html",controller:"ProfileController"}).when("/profile",{templateUrl:"profile.html",controller:"ProfileController"}).when("/admin",{templateUrl:"admin.html",controller:"AdminController"}).when("/logout",{templateUrl:"logout.html",controller:"LogoutController"}).when("/login",{templateUrl:"login.html",controller:"LoginController"})}]);
app.controller("MainController",["$scope","$route","$location","user",function(o,e,r,n){o.links_left=[{title:"Polls",url:"polls",beta:!0},{title:"Predictions",url:"predictions",alpha:!0}],o.location=r,o.user=n}]),app.controller("HomeController",["$scope","$log",function(){}]),app.controller("AdminController",["$scope","$resource","msgStack","User",function(o,e,r,n){o.resources=["users","idklol"],o.keys=["email","id"],o.stdin="",o.log=function(e){o.stdout=r(o,e),o.stdin=""},o.findUser=function(){var e=n(o.lookupKey,o.lookupValie);console.log(e)}}]),app.controller("PollsController",["$scope","$resource","$log",function(o){o.polls=[{creator:"erb",text:"This is a poll"},{creator:"clara",text:"This is another poll"}],o.time=(new Date).toISOString()}]),app.controller("PredictionsController",["$scope","$resource","$log",function(){}]),app.controller("PollController",["$scope","$resource","$log",function(o){o.voted=!0,o.votes=0,o.rating=0,o.vote=function(e){o.votes+=1,o.rating=e?o.rating+1:o.rating-1,o.trues=Math.round(1e3*(1+o.rating/o.votes)/2)/10,o.falses=Math.round(1e3*(1-o.rating/o.votes)/2)/10,console.log(o.rating),o.voted=!0}}]),app.controller("ProfileController",["$scope","$routeParams","$location","$cookieStore","gravatar","User",function(o,e,r,n,l,t){return console.log("Missing username routeParam"),e.username?(o.user={},void t("username",e.username).$promise.then(function(e){console.log(e),o.profile=e.data[0],o.profile.gravatar_hash=l.hash(o.profile.email)},function(){o.loading_error=!0})):(console.log("Missing username routeParam"),me=n.get("me"),console.log(me),void(void 0!==me?(console.log("Redirecting to profile"),r.path("/profile/"+me.username)):(console.log("Redirecting to login"),r.path("/login"))))}]),app.controller("LoginController",["$scope","$routeParams","$location","user","$http",function(o,e,r,n){o.logging_in=!1,n.is_logged_in()?r.path("/profile/"+n.username()):o.logged_in=!1,o.login=function(){o.logging_in=!0,n.login(o.username,o.password).then(function(){o.error="",r.path("/profile/"+o.username),o.logging_in=!1},function(e){o.error=e,o.logging_in=!1})}}]),app.controller("LogoutController",["user",function(o){o.logout()}]);
app.factory("msgStack",function(){var r=[];return function(e){return""===msg?r:(r.push({type:"info",msg:msg}),void console.log(e))}}),app.factory("User",["$log","$resource",function(r,e){var t=e("/api/0/:resource/:key/:val",{});return function(e,o){var n=t.get({resource:"users",key:e,val:o},function(e){r.info(e.data[0])},function(){r.error("Error")});return n}}]),app.factory("gravatar",["$log","$resource",function(){var r={};return r.hash=function(r){_.contains(r,"@")||console.error("Error: got empty email");var e=CryptoJS.MD5(r).toString();return e},r}]),app.factory("user",["$q","$log","$http","$route","$cookieStore","$location","gravatar",function(r,e,t,o,n,a,u){var i={};return i.is_logged_in=function(){return val=n.get("me")&&n.get("auth")},i.login=function(e,o){var a=r.defer();return t.post("/api/0/auth",{username:e,password:o}).success(function(r){console.log(r),r.auth?(n.put("auth",r.auth),t.get("/api/0/users/me",{headers:{Authorization:r.auth}}).success(function(r){console.log(r),n.put("me",{username:e,email:r.data[0].email}),a.resolve(r)})):a.reject(r.error)}).error(function(){error="Something went wrong while trying to make request",a.reject(error)}),a.promise},i.logout=function(){n.remove("auth"),n.remove("me"),a.path("/"),o.reload()},i.username=function(){return n.get("me").username},i.email=function(){return n.get("me").email},i.gravatar_hash=function(){return u.hash(i.email())},i}]);
app.filter("capitalize",function(){return function(t){return output=t[0].toUpperCase()+t.substr(1,t.length)}});
//# sourceMappingURL=data:application/json;base64,